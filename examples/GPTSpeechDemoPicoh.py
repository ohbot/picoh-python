# Code generated by Ohbot App export to Python
# HEADER CODE
# Import various libraries to display a window and for Ohbot or Picoh
from tkinter import *
from picoh import picoh
import threading
import random
# For GPT https://pypi.org/project/openai/
# Install this with pip install openai
import openai
# For Speech Recognition https://pypi.org/project/SpeechRecognition/
# Install this with pip install speech_recognition
import speech_recognition as sr

# Your OpenAI API key
OPENAI_API_KEY = ''

# Global variables for built-in sensor code
global running, mouseX, mouseY, answer, allowKeys

# Create a 600x600 tkinter window. This is used to display a form with buttons and a text input box.
win=Tk()
win.title('Ohbot')
win.geometry("600x600")

# USER INTERFACE FUNCTIONS
# Function that is called when the mouse is moved. 
def xy(event):
    global mouseX, mouseY
    # Get the coordinates of where the mouse movement happened. 
    xm = event.x
    ym = event.y

    # Scale the coordinate so it is between 0-10. Divide by 60 as window is 600 x 600. 
    mouseX = xm/60
    mouseY = ym/60

# Function to get the return key to work in the same way as clicking on the OK button during text entry
# allowKeys is of type varint which is needed by the tkinter interface
def entryBtn(event):
    allowKeys.set(1)

# Function called when window is closed. 
def on_closing():
    global running
    running = False
    picoh.reset()
    picoh.wait(1)
    picoh.close()
    win.destroy()

# Reset button
def resetBtn():
    global running
    running = False
    picoh.reset()

# stop button
def stopBtn():
    global running
    running = False

# go button
def goBtn():
    global running
    running = True
    # Each piece of code is run on its own thread so that they can run simultaneously
    threading.Thread(target=WhenFlagClickedThread0,args =()).start()
    threading.Thread(target=WhenFlagClickedThread1,args =()).start()
    threading.Thread(target=WhenFlagClickedThread2,args =()).start()
    threading.Thread(target=WhenFlagClickedThread3,args =()).start()
    threading.Thread(target=WhenFlagClickedThread4,args =()).start()


# show info - use this if you want to show information from your code
def showInfo(info):
    win.infoLabel.configure(text=info)

# TEMPLATE FUNCTIONS FOR SENSORS THAT ARE ALREADY CODED
def MouseX():
    return mouseX

def MouseY():
    return mouseY

def PickRandom(p1,p2):
    # multiply by 10 to give 0.1 resolution
    return random.randint(p1*10,p2*10)/10

def AskAndListen(p1):
    global answer
    picoh.say(p1, lipSync=False)
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()

    with microphone as source:
        showInfo("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        command = recognizer.recognize_google(audio)
        showInfo("You said: {}".format(command))
        answer = command.lower()
    except sr.UnknownValueError:
        showInfo("Sorry, I could not understand your command.")
        answer = ""
    except sr.RequestError as e:
        showInfo("Error: {}".format(e))
        answer = ""
        
def AskAndWait(p1):
    global answer, allowKeys
    allowKeys.set(0)
    picoh.say(p1, lipSync=False)
    win.entryLabel.configure(text=p1)
    win.entryBox.focus_set()
    win.entryButton.wait_variable(allowKeys)
    answer = win.entryBox.get()
    # remove text in the input box
    win.entryBox.delete(0,END)
    # remove focus from the input box
    win.focus()

def Answer():
    return answer

# Variable and Boolean inputs both map to the same readSensor function in the library but need to be kept separate so that
# they can convert back to blocks
def GetInput(index):
    return picoh.readSensor(index)

def GetBooleanInput(index):
    return picoh.readSensor(index)

# Map the sensor database block to getPhrase in the library.  Name is unused
def Database(name, set, variable):
    return picoh.getPhrase(set, variable)

# Map the SayDB block to getPhrase in the library.  Name is unused
def SayDatabase(name, set, variable):
    phrase = picoh.getPhrase(set, variable)
    picoh.say(phrase, lipSync=False)

# Get a letter of a string.  n is a 1 based index
def LetterOf(s, n):
    if (len (s) > n-1):
        return s[n-1]
    return ""

# GPT
def GPT3(model, prompt):
    if (OPENAI_API_KEY == ""):
        return "OpenAI key is undefined"
    
    openai.api_key = OPENAI_API_KEY

    messages=[{"role": "user", "content": f"{prompt}"}]

    response = openai.chat.completions.create(
    model=f"{model}",
    max_tokens=100,
    temperature=1.2,
    messages = messages)

    return response.choices[0].message.content

# TEMPLATE FUNCTIONS FOR THE SENSORS THAT YOU ARE USING ARE ADDED HERE.  YOU WILL HAVE TO ADD YOUR OWN CODE TO MAKE THESE WORK


# YOUR COMMENTS ARE ADDED HERE


# YOUR WHENFLAGCLICKED CODE IS ADDED HERE
def WhenFlagClickedThread0 ():
    global running,prompt,content,ht,hn
    running = True
    while (running):
        # prevent thread block
        picoh.wait(0.01)
        picoh.move (picoh.HEADTURN,ht)
        # add a slight headnod when speaking to show emphasis
        picoh.move (picoh.HEADNOD,hn-(picoh.getTopLip()-5)/5)
        picoh.move (picoh.EYETURN,15-ht*2)
        picoh.move (picoh.EYETILT,15-hn*2)

def WhenFlagClickedThread1 ():
    global running,prompt,content,ht,hn
    running = True
    while (running):
        picoh.move (picoh.LIDBLINK,0)
        picoh.wait (0.3)
        picoh.move (picoh.LIDBLINK,8)
        picoh.wait (PickRandom (0.5,4))

def WhenFlagClickedThread2 ():
    global running,prompt,content,ht,hn
    running = True
    while (running):
        hn=PickRandom (3.4,6.5)
        picoh.wait (PickRandom (0.5,3.5))

def WhenFlagClickedThread3 ():
    global running,prompt,content,ht,hn
    running = True
    while (running):
        ht=PickRandom (3,7)
        picoh.wait (PickRandom (0.5,3.5))

def WhenFlagClickedThread4 ():
    global running
    running = True
    while (running):
        # prevent thread block
        picoh.wait(0.1)
        picoh.move (picoh.TOPLIP,picoh.getTopLip ())
        picoh.move (picoh.BOTTOMLIP,picoh.getBottomLip ())

# YOUR KEYPRESS, WORDHEARD AND FUNCTION CODE IS ADDED HERE 
def WhenKeyPressedspace (event):
    if (allowKeys.get() != 0):
        global running,ht,hn,prompt,content
        running = True
        threading.Thread(target=WhenKeyPressedspaceThread0,args =()).start()

def WhenKeyPressedX (event):
    if (allowKeys.get() != 0):
        global running,ht,hn,prompt,content
        running = True
        threading.Thread(target=WhenKeyPressedXThread0,args =()).start()

def WhenKeyPressedspaceThread0 ():
    global running,ht,hn,prompt,content
    running = True
    picoh.baseColour(10,0,10)
    AskAndListen ("What is your subject?")
    prompt="compose a haiku about: "+Answer ()
    content=GPT3 ("gpt-4-turbo-preview", prompt)
    showInfo(content)
    picoh.setEyeShape("Sad")
    picoh.say (content,lipSync=False)
    picoh.baseColour(0,0,0)
    picoh.setEyeShape("Eyeball")

def WhenKeyPressedXThread0 ():
    global running,ht,hn,prompt,content
    running = False

# IF YOU USE ANY LISTS THEY WILL BE DEFINED HERE


# STARTUP CODE
running = False
mouseX = 0
mouseY = 0
answer = ""
allowKeys = IntVar(value=1)

# Bind the close button to the on_closing function.
win.protocol("WM_DELETE_WINDOW", on_closing)
    
# Bind windows Motion Action to xy function. Call the xy function whenever the mouse is moved.  
win.bind("<Motion>",xy)
win.bind('<Return>',entryBtn)

# YOUR WHENKEYPRESS BINDING CODE IS ADDED HERE
win.bind("<space>", WhenKeyPressedspace)
win.bind("X", WhenKeyPressedX)

# CODE FOR THE USER INTERFACE
photoReset = PhotoImage(file = r"reset.gif") 
Button(win, image=photoReset, command = resetBtn).place(x=2, y=2)

photoGo = PhotoImage(file = r"go.gif") 
Button(win, image=photoGo, command = goBtn).place(x=34, y=2)

photoStop = PhotoImage(file = r"stop.gif") 
Button(win, image=photoStop, command = stopBtn).place(x=68, y=2)

win.entryLabel = Label(win, text="")
win.entryLabel.place(x=5,y=250)

win.entryBox = Entry(win, text="", width=30)
win.entryBox.place(x=5,y=280)

win.entryButton = Button(text='OK', command=lambda: allowKeys.set(1))
win.entryButton.place(x=200,y=276)

win.infoLabel = Label(win, text="")
win.infoLabel.place(x=5,y=500)

# YOUR WHENLOADED CODE GOES IN HERE
print ("Using Ohbot library version:" + picoh.version)
showInfo("Click the green flag to start movement then press the Space key to speak a subject for a Haiku")

# Start the loop to make the window active.  
win.mainloop()
